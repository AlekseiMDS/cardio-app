import streamlit as st
import pandas as pd
import joblib

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø–∞–π–ø–ª–∞–π–Ω
model = joblib.load("models/model.joblib")
pipeline = joblib.load("pipeline/preprocessing_pipeline.joblib")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üíì –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é
input_method = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
    ("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é")
)

# üìÅ –í–≤–æ–¥ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['csv'])

    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        st.dataframe(data)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if st.button("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
            numeric_cols = ['age', 'height', 'weight', 'ap_hi', 'ap_lo']
            cat_cols = ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active']

            for col in numeric_cols:
                data[col] = pd.to_numeric(data[col], errors='coerce')

            for col in cat_cols:
                if col in data.columns:
                    data[col] = data[col].astype(str)

            try:
                X = pipeline.transform(data)
                preds = model.predict(X)
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
                st.write(preds)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# ‚úç –†—É—á–Ω–æ–π –≤–≤–æ–¥
else:
    st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:")

    # –í–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=120, value=30)
    gender = st.selectbox("–ü–æ–ª", options=[1, 2], format_func=lambda x: "–ñ–µ–Ω—â–∏–Ω–∞" if x == 1 else "–ú—É–∂—á–∏–Ω–∞")
    height = st.number_input("–†–æ—Å—Ç (—Å–º)", min_value=50, max_value=250, value=170)
    weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=20, max_value=300, value=70)
    ap_hi = st.number_input("–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", min_value=50, max_value=250, value=120)
    ap_lo = st.number_input("–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", min_value=30, max_value=150, value=80)

    cholesterol = st.selectbox(
        "–£—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞", 
        options=[1, 2, 3],
        format_func=lambda x: f"–£—Ä–æ–≤–µ–Ω—å {x} (1 - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, 2 - –≤—ã—à–µ –Ω–æ—Ä–º—ã, 3 - –≤—ã—Å–æ–∫–∏–π)"
    )

    gluc = st.selectbox(
        "–£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã", 
        options=[1, 2, 3],
        format_func=lambda x: f"–£—Ä–æ–≤–µ–Ω—å {x} (1 - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, 2 - –≤—ã—à–µ –Ω–æ—Ä–º—ã, 3 - –≤—ã—Å–æ–∫–∏–π)"
    )

    smoke = st.selectbox("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", options=[0, 1], format_func=lambda x: "–î–∞" if x else "–ù–µ—Ç")
    alco = st.selectbox("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –∞–ª–∫–æ–≥–æ–ª—å?", options=[0, 1], format_func=lambda x: "–î–∞" if x else "–ù–µ—Ç")
    active = st.selectbox("–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?", options=[0, 1], format_func=lambda x: "–î–∞" if x else "–ù–µ—Ç")

    # –í—ã—á–∏—Å–ª—è–µ–º BMI
    bmi = weight / (height / 100) ** 2
    st.write(f"üí° –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (BMI): **{bmi:.2f}**")

    if st.button("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        input_data = pd.DataFrame({
            'age': [age],
            'gender': [gender],
            'height': [height],
            'weight': [weight],
            'ap_hi': [ap_hi],
            'ap_lo': [ap_lo],
            'cholesterol': [cholesterol],
            'gluc': [gluc],
            'smoke': [smoke],
            'alco': [alco],
            'active': [active],
            'bmi': [bmi]
        })

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        cat_cols = ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active']
        for col in cat_cols:
            input_data[col] = input_data[col].astype(str)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        try:
            X = pipeline.transform(input_data)
            pred = model.predict(X)
            st.success(f"ü©∫ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ï—Å—Ç—å —Ä–∏—Å–∫' if pred[0] == 1 else '–†–∏—Å–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
